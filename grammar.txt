Program : DeclList
				;
DeclList : DeclList Decl
				 | Decl

Decl : VariableDecl 
     | FunctionDecl 
     | ClassDecl 
     | InterfaceDecl

VariableDecl : Variable ;

Variable : Type ident

Type : int 
		 | 'double'
		 | 'bool'
		 | 'string'
		 | 'void'
		 | ident 
		 | Type[]



InterfaceDecl : 'interface' ident '{' Prototype '}'

Prototype : Type ident ( Formals ) ; | EPSILON

Formals : Formals ',' Variable
				|	Variable
				| EPSILON

FunctionDecl : Type ident ( Formals ) StmtBlock 

StmtBlock : '{' VariableDecl∗ Stmt∗ '}'



ClassDecl ::= class ident <extends ident> <implements ident+ ,> { Field∗ }
Field ::= VariableDecl | FunctionDecl

Stmt ::= <Expr>; | IfStmt | WhileStmt | ForStmt | BreakStmt | ReturnStmt | PrintStmt | StmtBlock
IfStmt ::= if ( Expr ) Stmt <else Stmt>
WhileStmt ::= while ( Expr ) Stmt
ForStmt ::= for ( <Expr>; Expr ; <Expr>) Stmt
ReturnStmt ::= return < Expr > ;
BreakStmt ::= break ;
PrintStmt ::= Print ( Expr+ , ) ;
Expr ::= LValue = Expr | Constant | LValue | this | Call | ( Expr ) | Expr + Expr | Expr - Expr | Expr * Expr | Expr / Expr | Expr % Expr | - Expr | Expr < Expr | Expr <= Expr | Expr > Expr | Expr >= Expr | Expr == Expr | Expr ! = Expr | Expr && Expr | Expr || Expr | ! Expr | ReadInteger ( ) | ReadLine ( ) | New ( ident ) | NewArray ( Expr , Type )
LValue ::= ident | Expr . ident | Expr [ Expr ]
Call ::= ident ( Actuals ) | Expr . ident ( Actuals )
Actuals ::= Expr+ , |
Constant ::= intConstant | doubleConstant | boolConstant | stringConstant | null
